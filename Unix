Useful Commands for Linux

Generate ssh keys
ssh-keygen -t rsa

Find processes running on a particular ports
netstat -vanp tcp | grep 8080
sudo netstat -tlnp | grep 8080
sudo netstat -lptu (see all listening ports)

Find process running on a particular port and show pid
lsof -i tcp:<port>

Kill a process by pid
kill -9 <pid>

Show the amount of disk space used and available
df

Display the amount of disk space used by the specified files and for each subdirectory
du

Find large directories and order
du -hs */ .*/ | sort -n

Simpler way of finding large directories and ordering
du -hsc * | sort -h

[Python] Prettify JSON and output to new file
python -m json.tool someUnformattedJson.json >> mark.json

Add alias for command (redHat .bashrc else .bash_profile)
sudo nano/vi/vim .bashrc/.bash_profile
alias x='somecommand'

Copy from remote to local
scp username@192.168.1.111:/path/to/myfile.txt /Users/Jamie/local/path/to/myfile.txt

Find file/dir in root dir
find / -name somefilename

Find directory in root dir
find / -type d -name 'some_filename'

Find files containing a given string
grep -rn '/path/to/somewhere/' -e "pattern"

Get a count of files in a given directory
find ./directory-name -type f | wc -l

Get count of lines in a given file
wc -l filename

View memory usage (simple view)
free -m

View detailed memory usage as well as CPU stats etc
top

Delete all files in dir (workaround for rm -rf * "argument list is too long")
find . -type f -delete

Find and delete empty files from current dir down
find . -type f -empty -delete -print

Delete all json files in dir when argument list is too long for rm -rf *.json
for f in *.json; do sudo rm -rf "$f"; done

Make 100 copies of a file with number added to the name
for f in {1..100}; do cp some-file.json some-file-$f.json; done

Zipping when argument list is too long (omit -xvf etc)
zip -r my.zip .

Install ifconfig if missing
sudo [yum|apt-get] install -y net-tools

Install telnet if missing
sudo [yum|apt-get] install -y telnet|telnet-server

Switch to root user and stay in same directory
sudo -s

Run this before running a bash script to show all executed steps (good for debugging bash scripts)
set -x

Open a port that displays a simple message (access via curl only e.g. "curl -v localhost:4001")
echo "Hello, World"  | nc -l 4001

Start a simple http server (can be accessed via browser or curl e.g. "localhost:4001/index.html" or "curl -v localhost:4001/index.html")
python -m SimpleHTTPServer 4001

View all users 
cat /etc/passwd

View last 1000 lines of a file
tail -n 1000 <filename>

Get tar.gz of Java8_171 from command line (wget)
wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2Ftechnetwork%2Fjava%2Fjavase%2Fdownloads%2Fjdk8-downloads-2133151.html; oraclelicense=accept-securebackup-cookie;" "http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.tar.gz"

Unpacking tar.gz (2 step)
gzip -d filename.tar.gz
tar -xvf filename.tar

Unpacking tar.gz (1 step)
tar -xzf filename.tar.gz

Revert to default shell
chsh -s bash

Check OS (use either of the below)
cat /etc/os-release
lsb_release -a
hostnamectl

echo output of command to file
echo `ls -l ../` >> out.txt

curl with authentication
curl --user name:password http://www.example.com

Read from file and print each line
while read hostname; do
  echo "host: $hostname"
done < hosts.txt

Filename to variable
filename=`basename "$0"`

Watch a process e.g. docker ps, refresh every second
watch -n1 'docker ps'

Run cURL with tracing (includes headers etc. which are not included when using -vvv)
curl http://google.com --trace-ascii -

Find all unique lines in a file
sort -u test.txt

vi/vim show line numbers
:set number

Find out when all files in a directory were last modified (in reverse order)
find directoryname/ -type f -printf '%TY-%Tm-%Td %TT %p\n' | sort -r
